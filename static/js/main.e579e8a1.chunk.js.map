{"version":3,"sources":["components/ModelPredict.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["url","model","ModelPredict","useState","setModel","a","tf","console","log","useEffect","then","loadModel","runModel","data","setPrediction","predict","reshape","array","scores","predicted","indexOf","Math","max","setTimeout","useStyles","makeStyles","theme","item","border","height","container","padding","button","textAlign","canvas","width","image","title","margin","App","classes","setImage","document","getElementById","context","getContext","paint","compuetedStyle","getComputedStyle","parseInt","getPropertyValue","mouse","x","y","onPaint","lineTo","stroke","addEventListener","e","pageX","offsetLeft","pageY","offsetTop","lineWidth","lineJoin","lineCap","strokeStyle","moveTo","beginPath","removeEventListener","img","Image","onload","drawImage","getImageData","input","j","length","res","push","every","error","src","toDataURL","Grid","className","direction","justify","alignItems","xs","sm","id","viewBox","xmlns","focusable","style","caretColor","fill","fontSize","Button","variant","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e579e8a1.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\n\n//Model and metadata URL\nconst url = {\n  model:\n    \"https://raw.githubusercontent.com/mattborghi/mnist-webapp/main/model/content/model.json\",\n};\n\nfunction ModelPredict() {\n  // const [metadata, setMetadata] = useState();\n  const [model, setModel] = useState();\n\n  async function loadModel(url) {\n    try {\n      const model = await tf.loadLayersModel(url.model);\n      setModel(model);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  useEffect(() => {\n    tf.ready().then(() => {\n      loadModel(url);\n    });\n  }, []);\n\n  const runModel = (data, setPrediction) => {\n    // wait for the model to be defined\n    if (model) {\n      model\n        .predict([tf.tensor(data).reshape([1, 28, 28, 1])])\n        .array()\n        .then(function (scores) {\n          scores = scores[0];\n          var predicted = scores.indexOf(Math.max(...scores));\n          console.log(\n            \"predicted: \",\n            predicted,\n            \" with probability: \",\n            Math.max(...scores),\n            \"%\"\n          );\n          setPrediction(predicted);\n        });\n    } else {\n      // The model takes a bit to load, if we are too fast, wait\n      setTimeout(function () {\n        runModel(data);\n      }, 50);\n    }\n  };\n\n  return [runModel];\n}\n\nexport default ModelPredict;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n// import WritingCanvas from \"./components/WritingCanvas\";\nimport ModelPredict from \"./components/ModelPredict\";\n\nconst useStyles = makeStyles((theme) => ({\n  item: {\n    border: \"3px solid red\",\n    height: \"83vh\",\n  },\n  container: {\n    padding: 20,\n  },\n  button: {\n    textAlign: \"center\",\n  },\n  canvas: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  image: {\n    width: \"100%\",\n    height: \"100%\",\n    textAlign: \"center\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: 0,\n    margin: 0,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [runModel] = ModelPredict();\n  const [image, setImage] = useState(\"\");\n\n  useEffect(() => {\n    if (runModel) {\n      // From https://www.html5canvastutorials.com/labs/html5-canvas-paint-application/\n      var canvas: any = document.getElementById(\"myCanvas\");\n      var context = canvas.getContext(\"2d\");\n      var paint: any = document.getElementById(\"paint\");\n      var compuetedStyle = getComputedStyle(paint);\n      canvas.width = parseInt(compuetedStyle.getPropertyValue(\"width\"));\n      canvas.height = parseInt(compuetedStyle.getPropertyValue(\"height\"));\n\n      var mouse = { x: 0, y: 0 };\n\n      var onPaint = function () {\n        context.lineTo(mouse.x, mouse.y);\n        context.stroke();\n      };\n\n      canvas.addEventListener(\n        \"mousemove\",\n        function (e: any) {\n          mouse.x = e.pageX - canvas.offsetLeft;\n          mouse.y = e.pageY - canvas.offsetTop;\n        },\n        false\n      );\n\n      context.lineWidth = 25;\n      context.lineJoin = \"round\";\n      context.lineCap = \"round\";\n      context.strokeStyle = \"red\";\n\n      canvas.addEventListener(\n        \"mousedown\",\n        function (e: any) {\n          context.moveTo(mouse.x, mouse.y);\n          context.beginPath();\n          canvas.addEventListener(\"mousemove\", onPaint, false);\n        },\n        false\n      );\n\n      canvas.addEventListener(\n        \"mouseup\",\n        function () {\n          canvas.removeEventListener(\"mousemove\", onPaint, false);\n          var img = new Image();\n          img.onload = function () {\n            context.drawImage(img, 0, 0, 28, 28);\n            var data = context.getImageData(0, 0, 28, 28).data;\n            // for (var j = 0; j < data.length; ++j) {\n            //   if (data[j] !== 0) {\n            //     console.log(data[j]);\n            //   }\n            // }\n            var input = [];\n            for (var j = 0; j < data.length; j += 4) {\n              var res =\n                (data[j] + data[j + 1] + data[j + 2] + data[j + 3]) / 4.0;\n              input.push(res / 255);\n              // input.push(data[j + 2] / 255);\n            }\n            // Print the whole array of data\n            // console.log(JSON.stringify(input, null, 1));\n            if (input.every((item) => item === 0)) {\n              console.error(\"Can't be all zeros!\");\n            } else {\n              runModel(input, setImage);\n            }\n          };\n          img.src = canvas.toDataURL(\"image/png\");\n        },\n        false\n      );\n    }\n  }, [runModel]);\n\n  return (\n    <Grid\n      container\n      className={classes.container}\n      direction=\"row\"\n      justify=\"space-around\"\n      alignItems=\"center\"\n    >\n      <Grid className={classes.title} item xs={12}>\n        <h1>MNIST Number Predictor</h1>\n      </Grid>\n      <Grid className={classes.item} item xs={12} sm={5}>\n        {/* <h2 className={classes.title}>Write here: </h2> */}\n        {/* <WritingCanvas setImage={setImage} /> */}\n        <div id=\"paint\" className={classes.canvas}>\n          <canvas id=\"myCanvas\"></canvas>\n        </div>\n      </Grid>\n      <Grid item sm={2}></Grid>\n      <Grid className={classes.item} item xs={12} sm={5}>\n        <div id=\"number\" className={classes.image}>\n          <svg\n            width=\"100%\"\n            height=\"100%\"\n            viewBox=\"0 0 48 1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            focusable=\"false\"\n            style={{ caretColor: \"transparent\" }}\n          >\n            {image !== \"\" && (\n              <text x=\"0\" y=\"0\" fill=\"black\" fontSize=\"30%\">\n                Predicted:{\" \"}\n              </text>\n            )}\n            <text x=\"30\" y=\"5\" fill=\"red\">\n              {image}\n            </text>\n          </svg>\n        </div>\n      </Grid>\n      <Grid className={classes.button} item xs>\n        <Button variant=\"outlined\" onClick={() => setImage(\"\")}>\n          Clear\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}